[{"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\index.js":"1","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\App.js":"2","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\aws-exports.js":"3","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\reportWebVitals.js":"4","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\queries.js":"5","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\user\\UserState.js":"6","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\user\\userReducer.js":"7","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\types.js":"8","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\mutations.js":"9","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\auth\\Auth.js":"10","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\layout\\Sidenav.js":"11","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\channels\\ChannelState.js":"12","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\channels\\channelReducer.js":"13","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\UserAvatar.js":"14","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\AvatarMenu.js":"15","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\menu\\EditProfile.js":"16","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\menu\\UploadImage.js":"17","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\utils\\Preloader.js":"18","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelHeader.js":"19","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelList.js":"20","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelInfo.js":"21","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\CreateChannel.js":"22","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\friends\\FriendChat.js":"23","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\Profile.js":"24","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\FriendProfile.js":"25","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\FriendRequest.js":"26","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\layout\\BarMenu.js":"27","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\subscriptions.js":"28","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\alert\\AlertState.js":"29","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\alert\\alertReducer.js":"30","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\channel\\ChannelChat.js":"31","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\channel\\ChannelInput.js":"32","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\friends\\FriendState.js":"33","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\friends\\friendReducer.js":"34","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\EditProfileForm.js":"35","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendFrame.js":"36","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendList.js":"37","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendHeader.js":"38","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\SearchField.js":"39"},{"size":605,"mtime":1610714398132,"results":"40","hashOfConfig":"41"},{"size":462,"mtime":1611771687788,"results":"42","hashOfConfig":"41"},{"size":691,"mtime":1610717020788,"results":"43","hashOfConfig":"41"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"41"},{"size":9482,"mtime":1610717018682,"results":"45","hashOfConfig":"41"},{"size":2204,"mtime":1611774014327,"results":"46","hashOfConfig":"41"},{"size":423,"mtime":1611763582140,"results":"47","hashOfConfig":"41"},{"size":1741,"mtime":1611765104595,"results":"48","hashOfConfig":"41"},{"size":19087,"mtime":1610717019062,"results":"49","hashOfConfig":"41"},{"size":2204,"mtime":1611773730403,"results":"50","hashOfConfig":"41"},{"size":8007,"mtime":1611786588602,"results":"51","hashOfConfig":"41"},{"size":4754,"mtime":1610756140565,"results":"52","hashOfConfig":"41"},{"size":1807,"mtime":1610756140576,"results":"53","hashOfConfig":"41"},{"size":1604,"mtime":1611763660018,"results":"54","hashOfConfig":"41"},{"size":1203,"mtime":1611763031395,"results":"55","hashOfConfig":"41"},{"size":756,"mtime":1611763031423,"results":"56","hashOfConfig":"41"},{"size":1797,"mtime":1611763254338,"results":"57","hashOfConfig":"41"},{"size":471,"mtime":1610756540977,"results":"58","hashOfConfig":"41"},{"size":1738,"mtime":1611771119743,"results":"59","hashOfConfig":"41"},{"size":2701,"mtime":1611771206205,"results":"60","hashOfConfig":"41"},{"size":2015,"mtime":1610579799590,"results":"61","hashOfConfig":"41"},{"size":3267,"mtime":1611771249022,"results":"62","hashOfConfig":"41"},{"size":5083,"mtime":1611771294673,"results":"63","hashOfConfig":"41"},{"size":4083,"mtime":1611771226730,"results":"64","hashOfConfig":"41"},{"size":3788,"mtime":1611771215603,"results":"65","hashOfConfig":"41"},{"size":4010,"mtime":1611771535553,"results":"66","hashOfConfig":"41"},{"size":2164,"mtime":1611772398632,"results":"67","hashOfConfig":"41"},{"size":15735,"mtime":1610717019366,"results":"68","hashOfConfig":"41"},{"size":904,"mtime":1610756140511,"results":"69","hashOfConfig":"41"},{"size":317,"mtime":1610756140528,"results":"70","hashOfConfig":"41"},{"size":5148,"mtime":1611771275620,"results":"71","hashOfConfig":"41"},{"size":1526,"mtime":1611770877934,"results":"72","hashOfConfig":"41"},{"size":3187,"mtime":1610756140588,"results":"73","hashOfConfig":"41"},{"size":278,"mtime":1610756140597,"results":"74","hashOfConfig":"41"},{"size":5384,"mtime":1611771513803,"results":"75","hashOfConfig":"41"},{"size":526,"mtime":1610756503806,"results":"76","hashOfConfig":"41"},{"size":3623,"mtime":1611772111666,"results":"77","hashOfConfig":"41"},{"size":1458,"mtime":1610756503853,"results":"78","hashOfConfig":"41"},{"size":3451,"mtime":1611772143222,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1uj6iio",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"82"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"82"},"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\index.js",[],["180","181"],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\App.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\aws-exports.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\reportWebVitals.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\queries.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\user\\UserState.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\user\\userReducer.js",["182"],"import { GET_AUTH_USER, USER_ERROR,UPDATE_USER } from '../types';\r\n\r\nexport default (state, action) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case GET_AUTH_USER:\r\n      return { ...state, user: payload, loading: false };\r\n    case USER_ERROR:\r\n      return { ...state, error: payload };\r\n    case UPDATE_USER:\r\n      return { ...state, user: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\types.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\mutations.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\auth\\Auth.js",["183"],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\layout\\Sidenav.js",["184","185","186","187"],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\channels\\ChannelState.js",["188","189","190"],"import React, { createContext, useReducer } from 'react';\r\nimport channelReducer from './channelReducer';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {\r\n  createMessage,\r\n  createChannel,\r\n  createGroup,\r\n} from '../../graphql/mutations';\r\nimport {\r\n  listChannels,\r\n  getChannel,\r\n  getUser,\r\n  listGroups,\r\n} from '../../graphql/queries';\r\nimport {\r\n  GET_CHANNELS,\r\n  CHANNEL_ERROR,\r\n  GET_CHANNEL,\r\n  PUSH_TO_CHANNEL,\r\n  CLEAR_CHANNEL,\r\n  CREATE_CHANNEL,\r\n  GET_PROFILE,\r\n  GET_FRIEND_CHANNEL,\r\n  PUSH_TO_FRIEND_CHANNEL,\r\n  CLEAR_PROFILE,\r\n  CLEAR_FRIEND_CHANNEL,\r\n} from '../types';\r\n\r\nexport const ChannelContext = createContext();\r\nconst { Provider } = ChannelContext;\r\n\r\nconst ChannelState = ({ children }) => {\r\n  // set up initial state\r\n  const initialState = {\r\n    channels: [],\r\n    channel: null,\r\n    friendChannel: null,\r\n    loadingFriendChannel: true,\r\n    channelError: null,\r\n    profile: null,\r\n    loadingProfile: true,\r\n  };\r\n\r\n  // set up the useReducer hook\r\n  const [state, dispatch] = useReducer(channelReducer, initialState);\r\n\r\n  const getChannels = async () => {\r\n    try {\r\n      const result = await API.graphql(graphqlOperation(listGroups));\r\n      dispatch({\r\n        type: GET_CHANNELS,\r\n        payload: result.data.listGroups.items,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const createNewGroup = async (input) => {\r\n    try {\r\n      const result = await API.graphql(\r\n        graphqlOperation(createGroup, { input })\r\n      );\r\n      dispatch({\r\n        type: CREATE_CHANNEL,\r\n        payload: result.data.createGroup,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const postChannelMessage = async (input) => {\r\n    try {\r\n      const result = await API.graphql(\r\n        graphqlOperation(createMessage, { input })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const pushToChannel = (message) => {\r\n    dispatch({\r\n      type: PUSH_TO_CHANNEL,\r\n      payload: message,\r\n    });\r\n  };\r\n  const clearChannel = () => {\r\n    dispatch({\r\n      type: CLEAR_CHANNEL,\r\n    });\r\n  };\r\n  const pushToFriendChannel = (message) => {\r\n    dispatch({\r\n      type: PUSH_TO_FRIEND_CHANNEL,\r\n      payload: message,\r\n    });\r\n  };\r\n\r\n  const getSingleChannel = async (id) => {\r\n    try {\r\n      const input = { id: id };\r\n      const result = await API.graphql(graphqlOperation(getChannel, input));\r\n      console.log(result);\r\n      dispatch({\r\n        type: GET_CHANNEL,\r\n        payload: result.data.getChannel,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const getFriendChannel = async (id) => {\r\n    try {\r\n      const input = { id: id };\r\n      const result = await API.graphql(graphqlOperation(getChannel, input));\r\n      console.log(result);\r\n      dispatch({\r\n        type: GET_FRIEND_CHANNEL,\r\n        payload: result.data.getChannel,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const getSingleProfile = async (name) => {\r\n    try {\r\n      const input = { name: name };\r\n      const result = await API.graphql(graphqlOperation(getUser, input));\r\n      console.log(result);\r\n      dispatch({\r\n        type: GET_PROFILE,\r\n        payload: result.data.getUser,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: CHANNEL_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const clearProfile = () => {\r\n    dispatch({\r\n      type: CLEAR_PROFILE,\r\n    });\r\n  };\r\n  const clearFriendChannel = () => {\r\n    dispatch({\r\n      type: CLEAR_FRIEND_CHANNEL,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Provider\r\n      value={{\r\n        channels: state.channels,\r\n        channel: state.channel,\r\n        profile: state.profile,\r\n        loadingProfile: state.loadingProfile,\r\n        friendChannel: state.friendChannel,\r\n        channelError: state.channelError,\r\n        loadingFriendChannel: state.loadingFriendChannel,\r\n        getFriendChannel,\r\n        getChannels,\r\n        getSingleProfile,\r\n        getSingleChannel,\r\n        postChannelMessage,\r\n        pushToChannel,\r\n        clearProfile,\r\n        clearChannel,\r\n        createNewGroup,\r\n        pushToFriendChannel,\r\n        clearFriendChannel,\r\n      }}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default ChannelState;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\channels\\channelReducer.js",["191"],"import {\r\n  GET_CHANNELS,\r\n  CHANNEL_ERROR,\r\n  GET_CHANNEL,\r\n  PUSH_TO_CHANNEL,\r\n  CLEAR_CHANNEL,\r\n  CREATE_CHANNEL,\r\n  GET_PROFILE,\r\n  CLEAR_PROFILE,\r\n  GET_FRIEND_CHANNEL,\r\n  PUSH_TO_FRIEND_CHANNEL,\r\n  CLEAR_FRIEND_CHANNEL,\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case GET_CHANNELS:\r\n      return { ...state, channels: payload };\r\n    case CHANNEL_ERROR:\r\n      return { ...state, channelError: payload };\r\n    case GET_CHANNEL:\r\n      return {\r\n        ...state,\r\n        channel: payload,\r\n      };\r\n    case GET_FRIEND_CHANNEL:\r\n      return {\r\n        ...state,\r\n        friendChannel: payload,\r\n        loadingFriendChannel: false,\r\n      };\r\n    case PUSH_TO_CHANNEL:\r\n      return {\r\n        ...state,\r\n        channel: {\r\n          ...state.channel,\r\n          messages: {\r\n            ...state.channel.messages,\r\n            items: [...state.channel.messages.items, payload],\r\n          },\r\n        },\r\n      };\r\n    case PUSH_TO_FRIEND_CHANNEL:\r\n      return {\r\n        ...state,\r\n        friendChannel: {\r\n          ...state.friendChannel,\r\n          messages: {\r\n            ...state.friendChannel.messages,\r\n            items: [...state.friendChannel.messages.items, payload],\r\n          },\r\n        },\r\n      };\r\n    case CLEAR_CHANNEL:\r\n      return { ...state, channel: null };\r\n    case CLEAR_FRIEND_CHANNEL:\r\n      return { ...state, friendChannel: null, loadingFriendChannel: true };\r\n    case CREATE_CHANNEL:\r\n      return { ...state, channels: [...state.channels, payload] };\r\n    case GET_PROFILE:\r\n      return { ...state, profile: payload, loadingProfile: false };\r\n    case CLEAR_PROFILE:\r\n      return { ...state, loadingProfile: true, profile: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\UserAvatar.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\AvatarMenu.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\menu\\EditProfile.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\menu\\UploadImage.js",["192","193"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport { Storage } from 'aws-amplify';\r\nimport { UserContext } from '../../../context/user/UserState';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function UploadButtons() {\r\n  const useContext = useContext(UserContext);\r\n  const { user, updateCurrentUser } = useContext;\r\n  const classes = useStyles();\r\n  const onChange = (e) => {\r\n    const input = {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      userId: user.userId,\r\n      phone: user.phone,\r\n      aboutMe: user.aboutMe,\r\n      image: `https://agora69ee83a136fe49c88773e39cdc2de328140432-dev.s3-eu-west-1.amazonaws.com/public/${user.name}.jpg`,\r\n    };\r\n\r\n    const file = e.target.files[0];\r\n\r\n    Storage.put(`${user.name}.jpg`, file, {\r\n      contentType: 'image/png',\r\n    })\r\n      .then((result) => updateCurrentUser(input))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"contained-button-file\"\r\n        multiple\r\n        onChange={onChange}\r\n        type=\"file\"\r\n      />\r\n\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Button\r\n          color=\"primary\"\r\n          aria-label=\"upload picture\"\r\n          size=\"small\"\r\n          component=\"span\"\r\n          className={classes.button}\r\n          startIcon={<PhotoCamera />}\r\n        >\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\utils\\Preloader.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelHeader.js",["194"],"import React, { useEffect, useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ChannelList from './ChannelList';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GroupsIcon from '@material-ui/icons/Group';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n// import Collapse from '@material-ui/core/Collapse';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { Link } from 'react-router-dom';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '280px',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function ChannelHeader() {\r\n  const channelContext = useContext(ChannelContext);\r\n  const { getChannels } = channelContext;\r\n\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    getChannels();\r\n    console.log('got');\r\n  }, []);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <ListItem>\r\n        <ListItemIcon style={{ marginLeft: '1rem', marginRight: '-1rem' }}>\r\n          <GroupsIcon />\r\n        </ListItemIcon>\r\n        <Typography variant=\"h5\" noWrap>\r\n          Groups\r\n        </Typography>\r\n        <ListItemSecondaryAction>\r\n          <IconButton aria-label=\"add\" component={Link} to={'/createchannel'}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>{' '}\r\n      <ChannelList />\r\n    </List>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelList.js",["195","196","197"],"import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { FixedSizeList } from 'react-window';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    height: 500,\r\n    maxWidth: 250,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n\r\n}));\r\n\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  const { getSingleChannel, channels, history } = data;\r\n\r\n  const enterChat = () => {\r\n    getSingleChannel(channels[index].id);\r\n    history.push('/channelchat');\r\n  };\r\n  const viewChannel = () => {\r\n    getSingleChannel(channels[index].id);\r\n    history.push('/channelinfo');\r\n  };\r\n  return (\r\n    <>\r\n      {channels.length > 0 && (\r\n        <ListItem style={{ paddingLeft: '2rem' }} key={index}>\r\n          <ListItemAvatar onClick={viewChannel}>\r\n            <Avatar>\r\n              <WorkIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={channels[index].name} />\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"comments\"\r\n              color=\"primary\"\r\n              onClick={enterChat}\r\n            >\r\n              <ChatIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nrenderRow.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  style: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function ChannelList() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const channelContext = useContext(ChannelContext);\r\n  const { channels, getSingleChannel } = channelContext;\r\n  const length = channels.length;\r\n  return (\r\n    <div className={classes.root}>\r\n      <FixedSizeList\r\n        height={500}\r\n        width={250}\r\n        itemSize={50}\r\n        itemCount={length}\r\n        itemData={{ channels, getSingleChannel, history }}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\ChannelInfo.js",["198","199"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 345,\r\n  },\r\n});\r\n\r\nexport default function ChannelInfo() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      <Grid item xs={10} lg={6} md={8}>\r\n        {' '}\r\n        <Card className={classes.root}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              component=\"img\"\r\n              alt=\"Contemplative Reptile\"\r\n              height=\"140\"\r\n              image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n              title=\"Contemplative Reptile\"\r\n            />\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Lizard\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                Lizards are a widespread group of squamate reptiles, with over\r\n                6,000 species, ranging across all continents except Antarctica\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Share\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Learn More\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\channels\\CreateChannel.js",["200","201","202"],"import React, { useState, useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { graphqlOperation, API } from 'aws-amplify';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createChannel } from '../../graphql/mutations';\r\nimport { AlertContext } from '../../context/alert/AlertState';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 500,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: '25ch',\r\n  },\r\n  submitButton: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: '3rem',\r\n  },\r\n}));\r\n\r\nexport default function CreateChannel({ setDisplayItem = (f) => f }) {\r\n  const alertContext = useContext(AlertContext);\r\n  const channelContext = useContext(ChannelContext);\r\n  const { setAlert } = alertContext;\r\n  const { createNewGroup } = channelContext;\r\n  const classes = useStyles();\r\n  const [userForm, setForm] = useState({\r\n    name: '',\r\n    description: '',\r\n  });\r\n\r\n  const { name, description } = userForm;\r\n  const submitForm = async (e) => {\r\n    e.preventDefault();\r\n    const input = {\r\n      name,\r\n      description,\r\n    };\r\n    if (name === '') {\r\n      setAlert('Group name is required', 'error');\r\n    } else {\r\n      setDisplayItem('');\r\n      createNewGroup(input);\r\n      setAlert('Group was successfully created', 'success');\r\n      setForm({ name: '', description: '' });\r\n    }\r\n  };\r\n  const onChange = (e) => {\r\n    setForm({ ...userForm, [e.target.name]: e.target.value });\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      {' '}\r\n      <Typography variant=\"h6\" noWrap>\r\n        Create a Group\r\n      </Typography>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <div>\r\n          <TextField\r\n            style={{ marginTop: '2rem' }}\r\n            label={!name && 'Group Name'}\r\n            id=\"outlined-margin-none\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={onChange}\r\n            className={classes.textField}\r\n            variant=\"outlined\"\r\n          />\r\n        </div>\r\n\r\n        <div style={{ marginTop: '2rem' }}>\r\n          <TextField\r\n            style={{ width: '100%' }}\r\n            id=\"outlined-multiline-flexible\"\r\n            label={!description && 'Description'}\r\n            multiline\r\n            name=\"description\"\r\n            rowsMax={6}\r\n            value={description}\r\n            onChange={onChange}\r\n            variant=\"outlined\"\r\n          />\r\n        </div>\r\n        <div className={classes.submitButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            startIcon={<CreateIcon />}\r\n            onClick={submitForm}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\friends\\FriendChat.js",["203","204","205","206","207","208","209","210"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ReactTimeAgo from 'react-time-ago';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport { ChannelContext } from '../../../context/channels/ChannelState';\r\nimport { UserContext } from '../../../context/user/UserState';\r\nimport ChannelInput from '../channel/ChannelInput';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { onCreateMessage } from '../../../graphql/subscriptions';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '80vh',\r\n  },\r\n  chatResponse: {\r\n    paddingLeft: '4.4rem',\r\n  },\r\n  headBG: {\r\n    backgroundColor: '#e0e0e0',\r\n  },\r\n  borderRight500: {\r\n    borderRight: '1px solid #e0e0e0',\r\n  },\r\n  messageArea: {\r\n    height: '70vh',\r\n    overflowY: 'auto',\r\n  },\r\n});\r\n\r\nconst FriendChat = () => {\r\n  const classes = useStyles();\r\n  const channelContext = useContext(ChannelContext);\r\n  const userContext = useContext(UserContext);\r\n  const {\r\n    friendChannel,\r\n    pushToFriendChannel,\r\n    loadingFriendChannel,\r\n  } = channelContext;\r\n  const {} = userContext;\r\n\r\n  useEffect(() => {\r\n    if (!loadingFriendChannel) {\r\n      let subscribe = subscribeToMessages();\r\n      return () => {\r\n        console.log('unsubscribed');\r\n        // clearChannel();\r\n        subscribe.unsubscribe();\r\n      };\r\n    }\r\n  }, [loadingFriendChannel]);\r\n\r\n  const subscribeToMessages = () => {\r\n    const input = {\r\n      messageChannelId: friendChannel.id,\r\n    };\r\n    const subscribe = API.graphql(\r\n      graphqlOperation(onCreateMessage, input)\r\n    ).subscribe({\r\n      next: (noteData) => {\r\n        if (noteData.value.data.onCreateMessage) {\r\n          let message = noteData.value.data.onCreateMessage;\r\n          console.log(noteData);\r\n          pushToFriendChannel(message);\r\n        }\r\n      },\r\n    });\r\n    return subscribe;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container component={Paper} className={classes.chatSection}>\r\n        <Grid item xs={3} className={classes.borderRight500}></Grid>\r\n        <Grid item xs={12}>\r\n          {' '}\r\n          <List className={classes.messageArea}>\r\n            {friendChannel && friendChannel.messages.items.length !== 0 ? (\r\n              friendChannel.messages.items.map((message, index) => (\r\n                <>\r\n                  <ListItem key={index}>\r\n                    <ListItemAvatar>\r\n                      <Avatar alt=\"user avatar\" src={message.media} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={\r\n                        message?.messageUserName\r\n                          ? message.messageUserName\r\n                          : 'Unknown'\r\n                      }\r\n                    />\r\n                    <ReactTimeAgo date={message.createdAt} locale=\"en-US\" />\r\n                  </ListItem>\r\n                  <Grid\r\n                    container\r\n                    className={classes.chatResponse}\r\n                    key={message.id}\r\n                  >\r\n                    {' '}\r\n                    <Grid item xs={12}>\r\n                      {' '}\r\n                      <Typography\r\n                        key={index}\r\n                        component=\"p\"\r\n                        variant=\"h6\"\r\n                        className={classes.inline}\r\n                        color=\"textPrimary\"\r\n                      >\r\n                        {message.text}\r\n                      </Typography>\r\n                      <Divider />\r\n                    </Grid>\r\n                  </Grid>\r\n                </>\r\n              ))\r\n            ) : (\r\n              <Grid container className={classes.chatResponse}>\r\n                {' '}\r\n                <Grid item xs={12}>\r\n                  {' '}\r\n                  <Typography\r\n                    component=\"p\"\r\n                    variant=\"h6\"\r\n                    className={classes.inline}\r\n                    color=\"textPrimary\"\r\n                  >\r\n                    Please post your first message.\r\n                  </Typography>\r\n                  <Divider />\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </List>\r\n          <Divider />\r\n          <ChannelInput />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendChat;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\Profile.js",["211"],"import React, { useEffect, useContext } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { FriendContext } from '../../context/friends/FriendState';\r\nimport { UserContext } from '../../context/user/UserState';\r\nimport Preloader from '../../utils/Preloader';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '80vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 'auto',\r\n  },\r\n  large: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    marginBottom: '2rem',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    height: '70vh',\r\n    color: theme.palette.text.secondary,\r\n    marginTop: '10%',\r\n  },\r\n  header: {\r\n    color: '#0069d9',\r\n    marginBottom: '3rem',\r\n  },\r\n  icon: {\r\n    height: '25vh',\r\n  },\r\n}));\r\nfunction Profile({ setDisplayItem = (f) => f }) {\r\n  const classes = useStyles();\r\n  const channelContext = useContext(ChannelContext);\r\n  const friendContext = useContext(FriendContext);\r\n  const userContext = useContext(UserContext);\r\n  const { profile, loadingProfile, clearProfile } = channelContext;\r\n  const { user } = userContext;\r\n  const { addFriend } = friendContext;\r\n  const onClick = () => {\r\n    const friendData = {\r\n      id: `${profile.name}${user.name}`,\r\n      request: 'pending',\r\n      requester: user.name,\r\n      name: user.name,\r\n      friendImage: user.image,\r\n      friendFriendId: profile.name,\r\n    };\r\n    const userData = {\r\n      id: `${user.name}${profile.name}`,\r\n      request: 'sent',\r\n      requester: user.name,\r\n      name: profile.name,\r\n      friendImage: profile.image,\r\n      friendFriendId: user.name,\r\n    };\r\n    addFriend(friendData, userData);\r\n    setDisplayItem('');\r\n  };\r\n  useEffect(() => {\r\n    return () => {\r\n      clearProfile();\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        {loadingProfile ? (\r\n          <Preloader />\r\n        ) : (\r\n          <Paper className={classes.paper} elevation={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              {' '}\r\n              <Avatar\r\n                alt=\"Remy Sharp\"\r\n                src={profile?.image && profile.image}\r\n                className={classes.large}\r\n              />\r\n              <Grid item xs={12}>\r\n                {' '}\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  gutterBottom\r\n                  align=\"center\"\r\n                  className={classes.header}\r\n                >\r\n                  {profile?.name && profile.name}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                className={classes.icon}\r\n              >\r\n                <Grid item xs={12}>\r\n                  {' '}\r\n                  <Typography variant=\"subtitle2\" paragraph align=\"center\">\r\n                    {profile?.aboutMe && profile.aboutMe}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <IconButton\r\n                  color=\"secondary\"\r\n                  aria-label=\"add a friend\"\r\n                  onClick={onClick}\r\n                >\r\n                  <PersonAddIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\FriendProfile.js",["212"],"import React, { useEffect, useContext } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { UserContext } from '../../context/user/UserState';\r\nimport Preloader from '../../utils/Preloader';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '80vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 'auto',\r\n  },\r\n  large: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    marginBottom: '2rem',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    height: '70vh',\r\n    color: theme.palette.text.secondary,\r\n    marginTop: '10%',\r\n  },\r\n  header: {\r\n    color: '#0069d9',\r\n    marginBottom: '3rem',\r\n  },\r\n  icon: {\r\n    height: '25vh',\r\n  },\r\n}));\r\nfunction FriendProfile() {\r\n  const classes = useStyles();\r\n  const channelContext = useContext(ChannelContext);\r\n  const userContext = useContext(UserContext);\r\n  const { profile, addFriend, loadingProfile, clearProfile } = channelContext;\r\n  const { user } = userContext;\r\n  const onClick = () => {\r\n    const input = {\r\n      request: 'pending',\r\n      name: user.name,\r\n      requesterImage: user.image,\r\n      friendFriendId: profile.name,\r\n    };\r\n    addFriend(input);\r\n  };\r\n  useEffect(() => {\r\n    return () => {\r\n      clearProfile();\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        {loadingProfile ? (\r\n          <Preloader />\r\n        ) : (\r\n          <Paper className={classes.paper} elevation={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              {' '}\r\n              <Avatar\r\n                alt=\"Remy Sharp\"\r\n                src={profile?.image && profile.image}\r\n                className={classes.large}\r\n              />\r\n              <Grid item xs={12}>\r\n                {' '}\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  gutterBottom\r\n                  align=\"center\"\r\n                  className={classes.header}\r\n                >\r\n                  {profile?.name && profile.name}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                className={classes.icon}\r\n              >\r\n                <Grid item xs={12}>\r\n                  {' '}\r\n                  <Typography variant=\"subtitle2\" paragraph align=\"center\">\r\n                    {profile?.aboutMe && profile.aboutMe}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <IconButton\r\n                  color=\"secondary\"\r\n                  aria-label=\"add a friend\"\r\n                  onClick={onClick}\r\n                >\r\n                  <HistoryIcon />\r\n                </IconButton>{' '}\r\n                <IconButton color=\"secondary\" aria-label=\"add a friend\">\r\n                  <PeopleAltIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>{' '}\r\n          </Paper>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendProfile;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\profile\\FriendRequest.js",["213"],"import React, { useEffect, useContext } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport HowToRegIcon from '@material-ui/icons/HowToReg';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { UserContext } from '../../context/user/UserState';\r\nimport { FriendContext } from '../../context/friends/FriendState';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '80vh',\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 'auto',\r\n  },\r\n  large: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    marginBottom: '2rem',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    height: '70vh',\r\n    color: theme.palette.text.secondary,\r\n    marginTop: '10%',\r\n  },\r\n  header: {\r\n    color: '#0069d9',\r\n    marginBottom: '3rem',\r\n  },\r\n  icon: {\r\n    height: '25vh',\r\n  },\r\n}));\r\nfunction FriendRequest({ setDisplayItem = (f) => f }) {\r\n  const classes = useStyles();\r\n  const friendContext = useContext(FriendContext);\r\n  const channelContext = useContext(ChannelContext);\r\n  const userContext = useContext(UserContext);\r\n  const { acceptFriend, rejectFriendRequest, clearProfile } = friendContext;\r\n  const { profile } = channelContext;\r\n  const { user } = userContext;\r\n  const acceptFriendRequest = () => {\r\n    const friend = profile.name;\r\n    const username = user.name;\r\n    acceptFriend(friend, username);\r\n    setDisplayItem('');\r\n  };\r\n  const rejectRequest = () => {\r\n    const friend = profile.name;\r\n    const username = user.name;\r\n    rejectFriendRequest(friend, username);\r\n    setDisplayItem('');\r\n  };\r\n  useEffect(() => {\r\n    return () => {\r\n      clearProfile();\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            {' '}\r\n            <Avatar\r\n              alt=\"Remy Sharp\"\r\n              src={profile?.image && profile.image}\r\n              className={classes.large}\r\n            />\r\n            <Grid item xs={12}>\r\n              {' '}\r\n              <Typography\r\n                variant=\"h5\"\r\n                gutterBottom\r\n                align=\"center\"\r\n                className={classes.header}\r\n              >\r\n                {profile?.name && profile.name}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              className={classes.icon}\r\n            >\r\n              <Grid item xs={12}>\r\n                {' '}\r\n                <Typography variant=\"subtitle2\" paragraph align=\"center\">\r\n                  {profile?.aboutMe && profile.aboutMe}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <IconButton\r\n                color=\"secondary\"\r\n                aria-label=\"add a friend\"\r\n                onClick={rejectRequest}\r\n              >\r\n                <RemoveCircleOutlineIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                color=\"secondary\"\r\n                aria-label=\"add a friend\"\r\n                onClick={acceptFriendRequest}\r\n              >\r\n                <HowToRegIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendRequest;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\layout\\BarMenu.js",["214"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport GroupsIcon from '@material-ui/icons/Group';\r\nimport { Auth } from 'aws-amplify';\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n}));\r\nexport default function BarMenu({\r\n  setSidenavItem = (f) => f,\r\n  setMobileOpen = (f) => f,\r\n}) {\r\n  const classes = useStyles();\r\n  const setGroup = () => {\r\n    setSidenavItem('group');\r\n    setMobileOpen();\r\n  };\r\n  const setUser = () => {\r\n    setSidenavItem('user');\r\n    setMobileOpen();\r\n  };\r\n  const setFriend = () => {\r\n    setSidenavItem('friend');\r\n    setMobileOpen();\r\n  };\r\n  async function signOut() {\r\n    try {\r\n      await Auth.signOut();\r\n    } catch (error) {\r\n      console.log('error signing out: ', error);\r\n    }\r\n  }\r\n  return (\r\n    <div className={classes.grow}>\r\n      <IconButton\r\n        aria-label=\"show  new notifications\"\r\n        color=\"inherit\"\r\n        onClick={setFriend}\r\n      >\r\n        <FaceIcon\r\n          edge=\"end\"\r\n          aria-label=\"account of current user\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        />\r\n      </IconButton>\r\n      <IconButton onClick={setGroup}>\r\n        <GroupsIcon\r\n          edge=\"end\"\r\n          aria-label=\"account of current user\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        />\r\n      </IconButton>\r\n      <IconButton\r\n        edge=\"end\"\r\n        aria-label=\"account of current user\"\r\n        aria-haspopup=\"true\"\r\n        color=\"inherit\"\r\n        onClick={setUser}\r\n      >\r\n        <AccountCircle />\r\n      </IconButton>\r\n      <IconButton\r\n        edge=\"end\"\r\n        aria-label=\"exit app\"\r\n        aria-haspopup=\"true\"\r\n        color=\"inherit\"\r\n        onClick={signOut}\r\n      >\r\n        <ExitToAppIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\graphql\\subscriptions.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\alert\\AlertState.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\alert\\alertReducer.js",["215"],"import { SET_ALERT, REMOVE_ALERT } from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case SET_ALERT:\r\n      return [...state, action.payload];\r\n    case REMOVE_ALERT:\r\n      return state.filter((alert) => alert.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\channel\\ChannelChat.js",["216","217","218","219","220","221","222","223","224","225","226"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ReactTimeAgo from 'react-time-ago';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport { ChannelContext } from '../../../context/channels/ChannelState';\r\nimport { UserContext } from '../../../context/user/UserState';\r\nimport ChannelInput from './ChannelInput';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {\r\n  onCreateMessage,\r\n  onUpdateChannel,\r\n} from '../../../graphql/subscriptions';\r\nimport { updateChannel } from '../../../graphql/mutations';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '80vh',\r\n  },\r\n  chatResponse: {\r\n    paddingLeft: '4.4rem',\r\n  },\r\n  headBG: {\r\n    backgroundColor: '#e0e0e0',\r\n  },\r\n  borderRight500: {\r\n    borderRight: '1px solid #e0e0e0',\r\n  },\r\n  messageArea: {\r\n    height: '70vh',\r\n    overflowY: 'auto',\r\n  },\r\n});\r\n\r\nconst ChannelChat = ({ setDisplayItem = (f) => f }) => {\r\n  const classes = useStyles();\r\n  const channelContext = useContext(ChannelContext);\r\n  const userContext = useContext(UserContext);\r\n  const { channel, pushToChannel, clearChannel } = channelContext;\r\n  const {} = userContext;\r\n\r\n  useEffect(() => {\r\n    if (channel) {\r\n      let subscribe = subscribeToMessages();\r\n      return () => {\r\n        console.log('unsubscribed');\r\n        subscribe.unsubscribe();\r\n      };\r\n    }\r\n  }, [channel]);\r\n  useEffect(() => {\r\n    return () => {\r\n      clearChannel();\r\n    };\r\n  }, []);\r\n  const subscribeToMessages = () => {\r\n    const input = {\r\n      messageChannelId: channel.id,\r\n    };\r\n    const subscribe = API.graphql(\r\n      graphqlOperation(onCreateMessage, input)\r\n    ).subscribe({\r\n      next: (noteData) => {\r\n        if (noteData.value.data.onCreateMessage) {\r\n          let message = noteData.value.data.onCreateMessage;\r\n          console.log(noteData);\r\n          pushToChannel(message);\r\n        }\r\n      },\r\n    });\r\n    return subscribe;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container component={Paper} className={classes.chatSection}>\r\n        <Grid item xs={3} className={classes.borderRight500}></Grid>\r\n        <Grid item xs={12}>\r\n          {' '}\r\n          <List className={classes.messageArea}>\r\n            {channel && channel.messages.items.length !== 0 ? (\r\n              channel.messages.items.map((message, index) => (\r\n                <>\r\n                  <ListItem key={index}>\r\n                    <ListItemAvatar>\r\n                      <Avatar alt=\"user avatar\" src={message.media} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={\r\n                        message?.messageUserName\r\n                          ? message.messageUserName\r\n                          : 'Unknown'\r\n                      }\r\n                    />\r\n                    <ReactTimeAgo date={message.createdAt} locale=\"en-US\" />\r\n                  </ListItem>\r\n                  <Grid\r\n                    container\r\n                    className={classes.chatResponse}\r\n                    key={message.id}\r\n                  >\r\n                    {' '}\r\n                    <Grid item xs={12}>\r\n                      {' '}\r\n                      <Typography\r\n                        key={index}\r\n                        component=\"p\"\r\n                        variant=\"h6\"\r\n                        className={classes.inline}\r\n                        color=\"textPrimary\"\r\n                      >\r\n                        {message.text}\r\n                      </Typography>\r\n                      <Divider />\r\n                    </Grid>\r\n                  </Grid>\r\n                </>\r\n              ))\r\n            ) : (\r\n              <Grid container className={classes.chatResponse}>\r\n                {' '}\r\n                <Grid item xs={12}>\r\n                  {' '}\r\n                  <Typography\r\n                    component=\"p\"\r\n                    variant=\"h6\"\r\n                    className={classes.inline}\r\n                    color=\"textPrimary\"\r\n                  >\r\n                    Please post your first message.\r\n                  </Typography>\r\n                  <Divider />\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </List>\r\n          <Divider />\r\n          <ChannelInput />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChannelChat;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\chat\\channel\\ChannelInput.js",["227"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { ChannelContext } from '../../../context/channels/ChannelState';\r\nimport { UserContext } from '../../../context/user/UserState';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nfunction ChannelInput() {\r\n  const [text, setText] = useState('');\r\n  const channelContext = useContext(ChannelContext);\r\n  const userContext = useContext(UserContext);\r\n  const { postChannelMessage, friendChannel } = channelContext;\r\n  const { user } = userContext;\r\n\r\n  const postMessage = () => {\r\n    const input = {\r\n      text: text,\r\n      messageChannelId: friendChannel.id,\r\n      messageUserId: user.name,\r\n      messageUserName: user.name,\r\n      media: user.image,\r\n    };\r\n    postChannelMessage(input);\r\n    setText('');\r\n  };\r\n  const onChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid container style={{ padding: '20px' }}>\r\n      <Grid item xs={11}>\r\n        <TextField\r\n          id=\"outlined-basic-email\"\r\n          label=\"Type Something\"\r\n          fullWidth\r\n          onChange={onChange}\r\n          value={text}\r\n          name=\"text\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={1} align=\"right\">\r\n        <Fab color=\"primary\" aria-label=\"add\">\r\n          <SendIcon onClick={postMessage} />\r\n        </Fab>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default ChannelInput;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\friends\\FriendState.js",["228"],"import React, { createContext, useReducer } from 'react';\r\nimport friendReducer from './friendReducer';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport {\r\n  createFriend,\r\n  updateFriend,\r\n  createChannel,\r\n} from '../../graphql/mutations';\r\nimport { getUser } from '../../graphql/queries';\r\nimport { FRIEND_ERROR } from '../types';\r\n\r\nexport const FriendContext = createContext();\r\nconst { Provider } = FriendContext;\r\n\r\nconst FriendState = ({ children }) => {\r\n  const initialState = {\r\n    loadingFriend: true,\r\n    friend: null,\r\n    loadingProfile: true,\r\n    friendError: null,\r\n  };\r\n\r\n  // set up the useReducer hook\r\n  const [state, dispatch] = useReducer(friendReducer, initialState);\r\n\r\n  const addFriend = async (friendData, userData) => {\r\n    const data = {};\r\n    try {\r\n      const channel = await API.graphql(\r\n        graphqlOperation(createChannel, { input: data })\r\n      );\r\n      friendData.friendChannelId = channel.data.createChannel.id;\r\n      userData.friendChannelId = channel.data.createChannel.id;\r\n      const friend = await API.graphql(\r\n        graphqlOperation(createFriend, { input: friendData })\r\n      );\r\n      const user = await API.graphql(\r\n        graphqlOperation(createFriend, { input: userData })\r\n      );\r\n      console.log(friend, user);\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: FRIEND_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const acceptFriend = async (friend, user) => {\r\n    let userAcc = {\r\n      id: `${user}${friend}`,\r\n      request: 'invitationAccepted',\r\n    };\r\n    let friendAcc = {\r\n      id: `${friend}${user}`,\r\n      request: 'requestAccepted',\r\n    };\r\n    try {\r\n      const result = await API.graphql(\r\n        graphqlOperation(updateFriend, { input: userAcc })\r\n      );\r\n      const requestUpdate = await API.graphql(\r\n        graphqlOperation(updateFriend, { input: friendAcc })\r\n      );\r\n      console.log(result, requestUpdate);\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: FRIEND_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n  const rejectFriendRequest = async (friend, user) => {\r\n    let userAcc = {\r\n      id: `${user}${friend}`,\r\n      request: 'invitationRejected',\r\n    };\r\n    let friendAcc = {\r\n      id: `${friend}${user}`,\r\n      request: 'requestRejected',\r\n    };\r\n    try {\r\n      const result = await API.graphql(\r\n        graphqlOperation(updateFriend, { input: userAcc })\r\n      );\r\n      const requestUpdate = await API.graphql(\r\n        graphqlOperation(updateFriend, { input: friendAcc })\r\n      );\r\n      console.log(result, requestUpdate);\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: FRIEND_ERROR,\r\n        payload: err.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Provider\r\n      value={{\r\n        loadingFriend: state.loadingFriend,\r\n        loadingProfile: state.loadingProfile,\r\n        friendError: state.friendError,\r\n        friend: state.friendm,\r\n        addFriend,\r\n        acceptFriend,\r\n        rejectFriendRequest,\r\n      }}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default FriendState;\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\context\\friends\\friendReducer.js",["229"],"import { FRIEND_ERROR } from '../types';\r\n\r\nexport default (state, action) => {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case FRIEND_ERROR:\r\n      return { ...state, friendError: payload, loadingFriend: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\user\\EditProfileForm.js",["230","231"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AlertContext } from '../../context/alert/AlertState';\r\nimport { UserContext } from '../../context/user/UserState';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: '25ch',\r\n  },\r\n  submitButton: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: '3rem',\r\n  },\r\n}));\r\n\r\nexport default function EditProfileForm({ user }) {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const alertContext = useContext(AlertContext);\r\n  const userContext = useContext(UserContext);\r\n  const { setAlert } = alertContext;\r\n  const { updateCurrentUser, error } = userContext;\r\n  useEffect(() => {\r\n    error !== null && setAlert('Something went wrong', 'error');\r\n  }, [error]);\r\n\r\n  const [userForm, setForm] = useState({\r\n    name: user.name,\r\n    // address_line1: user?.address?.adress_line1 || '',\r\n    // address_line2: user?.address?.adress_line2 || '',\r\n    // city: user?.address?.city || '',\r\n    // postcode: user?.address?.postcode || '',\r\n    email: user?.email || '',\r\n    aboutMe: user?.aboutMe || '',\r\n  });\r\n\r\n  const {\r\n    id,\r\n    name,\r\n    address_line1,\r\n    address_line2,\r\n    city,\r\n    postcode,\r\n    email,\r\n    aboutMe,\r\n  } = userForm;\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    const input = {\r\n      id: user.id,\r\n      userId: user.userId,\r\n      name: name.trim(),\r\n      email,\r\n      aboutMe,\r\n      // address: {\r\n      //   address_line1,\r\n      //   address_line2,\r\n      //   city,\r\n      //   postcode,\r\n      // },\r\n    };\r\n    updateCurrentUser(input);\r\n    history.push('/');\r\n  };\r\n  const onChange = (e) => {\r\n    setForm({ ...userForm, [e.target.name]: e.target.value });\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <div>\r\n          <TextField\r\n            style={{ marginTop: '2rem' }}\r\n            label={!name && 'Username'}\r\n            id=\"outlined-margin-none\"\r\n            name=\"name\"\r\n            value={name}\r\n            disabled\r\n            onChange={onChange}\r\n            className={classes.textField}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            style={{ marginTop: '2rem' }}\r\n            label={!email && 'Email'}\r\n            name=\"email\"\r\n            id=\"outlined-margin-none\"\r\n            className={classes.textField}\r\n            value={email}\r\n            onChange={onChange}\r\n            variant=\"outlined\"\r\n          />\r\n        </div>\r\n\r\n        <div style={{ marginTop: '2rem' }}>\r\n          <TextField\r\n            style={{ width: '100%' }}\r\n            id=\"outlined-multiline-flexible\"\r\n            label={!aboutMe && 'About Me'}\r\n            multiline\r\n            name=\"aboutMe\"\r\n            rowsMax={6}\r\n            value={aboutMe}\r\n            onChange={onChange}\r\n            variant=\"outlined\"\r\n          />\r\n          <div>\r\n            {' '}\r\n            <TextField\r\n              style={{ marginTop: '2rem' }}\r\n              label={!address_line1 && 'Address Line 1'}\r\n              id=\"outlined-margin-none\"\r\n              name=\"address_line1\"\r\n              className={classes.textField}\r\n              onChange={onChange}\r\n              variant=\"outlined\"\r\n              value={address_line1}\r\n              disabled\r\n            />\r\n            <TextField\r\n              style={{ marginTop: '2rem' }}\r\n              label={!address_line2 && 'Address Line 2'}\r\n              name=\"address_line2\"\r\n              id=\"outlined-margin-none\"\r\n              className={classes.textField}\r\n              onChange={onChange}\r\n              variant=\"outlined\"\r\n              disabled\r\n              value={address_line2}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {' '}\r\n          <TextField\r\n            style={{ marginTop: '2rem' }}\r\n            label={!city && 'City'}\r\n            id=\"outlined-margin-none\"\r\n            name=\"city\"\r\n            className={classes.textField}\r\n            onChange={onChange}\r\n            variant=\"outlined\"\r\n            disabled\r\n            value={city}\r\n          />\r\n          <TextField\r\n            style={{ marginTop: '2rem' }}\r\n            label={!postcode && 'Postcode'}\r\n            name=\"postcode\"\r\n            id=\"outlined-margin-none\"\r\n            className={classes.textField}\r\n            onChange={onChange}\r\n            variant=\"outlined\"\r\n            value={postcode}\r\n            disabled\r\n          />\r\n        </div>\r\n        <div className={classes.submitButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            startIcon={<SaveIcon />}\r\n            onClick={submitForm}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendFrame.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendList.js",["232"],"import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { FixedSizeList } from 'react-window';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport AnnouncementIcon from '@material-ui/icons/Announcement';\r\nimport HourglassIcon from '@material-ui/icons/HourglassFullTwoTone';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    height: 'auto',\r\n    maxWidth: 250,\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginLeft: '2rem',\r\n  },\r\n}));\r\n\r\nfunction renderRow(props) {\r\n  const { index, style, data } = props;\r\n  const { getSingleProfile, users, history, getFriendChannel } = data;\r\n  const getProfile = (e, value) => {\r\n    users[index].request === 'pending'\r\n      ? history.push('friendrequest')\r\n      : history.push('friendprofile');\r\n    getSingleProfile(users[index].name);\r\n  };\r\n  const openChat = () => {\r\n    getFriendChannel(users[index].friendChannelId);\r\n  };\r\n  return (\r\n    <>\r\n      {users.length > 0 && (\r\n        <List>\r\n          <ListItem key={index} button>\r\n            <ListItemAvatar onClick={getProfile}>\r\n              <Avatar\r\n                alt={users[index]?.name}\r\n                src={\r\n                  users[index]?.requesterImage && users[index].requesterImage\r\n                }\r\n              />\r\n            </ListItemAvatar>\r\n            <ListItemText id={users[index]?.id} primary={users[index]?.name} />\r\n            <ListItemSecondaryAction>\r\n              {users[index]?.request === 'pending' ? (\r\n                <IconButton edge=\"end\" aria-label=\"delete\">\r\n                  <AnnouncementIcon />\r\n                </IconButton>\r\n              ) : users[index]?.request === 'sent' ? (\r\n                <IconButton edge=\"end\" aria-label=\"delete\">\r\n                  <HourglassIcon />\r\n                </IconButton>\r\n              ) : (\r\n                <IconButton\r\n                  edge=\"end\"\r\n                  aria-label=\"delete\"\r\n                  onClick={openChat}\r\n                  component={Link}\r\n                  to={'/friendchat'}\r\n                >\r\n                  <ChatIcon />\r\n                </IconButton>\r\n              )}\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </List>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nrenderRow.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  style: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function FriendList({ user }) {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const length = user?.friends?.items?.length || 0;\r\n  const channelContext = useContext(ChannelContext);\r\n  const { getSingleProfile, getFriendChannel } = channelContext;\r\n  let users = user?.friends?.items || [];\r\n  return (\r\n    <div className={classes.root}>\r\n      <FixedSizeList\r\n        height={500}\r\n        width={220}\r\n        itemSize={40}\r\n        itemCount={length}\r\n        itemData={{ users, getSingleProfile, getFriendChannel, history }}\r\n      >\r\n        {renderRow}\r\n      </FixedSizeList>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\FriendHeader.js",[],"C:\\Users\\Evalds\\Documents\\portfolio2\\src\\components\\friends\\SearchField.js",["233"],"import React, { useContext } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\nimport { listUsers } from '../../graphql/queries';\r\nimport { ChannelContext } from '../../context/channels/ChannelState';\r\nimport { UserContext } from '../../context/user/UserState';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default function SearchField() {\r\n  const userContext = useContext(UserContext);\r\n  let history = useHistory();\r\n  const { user } = userContext;\r\n  const channelContext = useContext(ChannelContext);\r\n  const { getSingleProfile } = channelContext;\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [name, setName] = React.useState(null);\r\n  const loading = open && options.length === 0;\r\n  const onChange = (e) => {\r\n    if (e.target.value !== '') {\r\n      setName(e.target.value);\r\n    } else {\r\n      setName(null);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n    (async () => {\r\n      const response = await API.graphql(\r\n        graphqlOperation(listUsers, { input: name })\r\n      );\r\n      console.log(response);\r\n      await sleep(1e3); // For demo purposes.\r\n      const people = await response.data.listUsers.items;\r\n\r\n      if (active) {\r\n        setOptions(people.map((user) => user.name));\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n  const getProfile = (e, value) => {\r\n    console.log(e.target.value, value);\r\n    if (!e || !value) {\r\n      console.log('none');\r\n    } else {\r\n      const isFriend = user.friends.items.filter(\r\n        (friend) => (friend.name = value)\r\n      ).length;\r\n      if (isFriend !== 0) {\r\n        getSingleProfile(value);\r\n        history.push('/friendprofile');\r\n      } else if (isFriend === 0 || !isFriend) {\r\n        getSingleProfile(value);\r\n        history.push('/profile');\r\n      } else {\r\n        history.push('/');\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      style={{ width: 300 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      onChange={getProfile}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={(option) => option}\r\n      options={options}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          onChange={onChange}\r\n          label=\"Search for friends\"\r\n          variant=\"outlined\"\r\n          style={{ width: '200px', marginLeft: '1.6rem' }}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? (\r\n                  <CircularProgress color=\"inherit\" size={20} />\r\n                ) : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n",{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":3,"column":1,"nodeType":"240","endLine":15,"endColumn":3},{"ruleId":"241","severity":1,"message":"242","line":28,"column":6,"nodeType":"243","endLine":28,"endColumn":12,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"249","line":19,"column":8,"nodeType":"247","messageId":"248","endLine":19,"endColumn":14},{"ruleId":"245","severity":1,"message":"250","line":26,"column":8,"nodeType":"247","messageId":"248","endLine":26,"endColumn":17},{"ruleId":"245","severity":1,"message":"251","line":93,"column":7,"nodeType":"247","messageId":"248","endLine":93,"endColumn":14},{"ruleId":"245","severity":1,"message":"252","line":6,"column":3,"nodeType":"247","messageId":"248","endLine":6,"endColumn":16},{"ruleId":"245","severity":1,"message":"253","line":10,"column":3,"nodeType":"247","messageId":"248","endLine":10,"endColumn":15},{"ruleId":"245","severity":1,"message":"254","line":80,"column":13,"nodeType":"247","messageId":"248","endLine":80,"endColumn":19},{"ruleId":"238","severity":1,"message":"239","line":15,"column":1,"nodeType":"240","endLine":68,"endColumn":3},{"ruleId":"245","severity":1,"message":"255","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":19,"column":22,"nodeType":"247","messageId":"258","endLine":19,"endColumn":32},{"ruleId":"241","severity":1,"message":"259","line":31,"column":6,"nodeType":"243","endLine":31,"endColumn":8,"suggestions":"260"},{"ruleId":"245","severity":1,"message":"261","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":19},{"ruleId":"245","severity":1,"message":"262","line":15,"column":22,"nodeType":"247","messageId":"248","endLine":15,"endColumn":26},{"ruleId":"245","severity":1,"message":"263","line":27,"column":24,"nodeType":"247","messageId":"248","endLine":27,"endColumn":29},{"ruleId":"245","severity":1,"message":"264","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":14},{"ruleId":"245","severity":1,"message":"265","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":19},{"ruleId":"245","severity":1,"message":"266","line":5,"column":10,"nodeType":"247","messageId":"248","endLine":5,"endColumn":26},{"ruleId":"245","severity":1,"message":"267","line":5,"column":28,"nodeType":"247","messageId":"248","endLine":5,"endColumn":31},{"ruleId":"245","severity":1,"message":"252","line":8,"column":10,"nodeType":"247","messageId":"248","endLine":8,"endColumn":23},{"ruleId":"245","severity":1,"message":"268","line":1,"column":40,"nodeType":"247","messageId":"248","endLine":1,"endColumn":48},{"ruleId":"245","severity":1,"message":"269","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":11},{"ruleId":"245","severity":1,"message":"270","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":17},{"ruleId":"245","severity":1,"message":"271","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":20},{"ruleId":"245","severity":1,"message":"272","line":15,"column":8,"nodeType":"247","messageId":"248","endLine":15,"endColumn":11},{"ruleId":"245","severity":1,"message":"273","line":16,"column":8,"nodeType":"247","messageId":"248","endLine":16,"endColumn":16},{"ruleId":"274","severity":1,"message":"275","line":56,"column":9,"nodeType":"276","messageId":"277","endLine":56,"endColumn":11},{"ruleId":"241","severity":1,"message":"278","line":67,"column":6,"nodeType":"243","endLine":67,"endColumn":28,"suggestions":"279"},{"ruleId":"241","severity":1,"message":"280","line":73,"column":6,"nodeType":"243","endLine":73,"endColumn":8,"suggestions":"281"},{"ruleId":"241","severity":1,"message":"280","line":61,"column":6,"nodeType":"243","endLine":61,"endColumn":8,"suggestions":"282"},{"ruleId":"241","severity":1,"message":"280","line":66,"column":6,"nodeType":"243","endLine":66,"endColumn":8,"suggestions":"283"},{"ruleId":"245","severity":1,"message":"284","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":13},{"ruleId":"238","severity":1,"message":"239","line":3,"column":1,"nodeType":"240","endLine":12,"endColumn":3},{"ruleId":"245","severity":1,"message":"268","line":1,"column":40,"nodeType":"247","messageId":"248","endLine":1,"endColumn":48},{"ruleId":"245","severity":1,"message":"269","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":11},{"ruleId":"245","severity":1,"message":"270","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":17},{"ruleId":"245","severity":1,"message":"271","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":20},{"ruleId":"245","severity":1,"message":"272","line":15,"column":8,"nodeType":"247","messageId":"248","endLine":15,"endColumn":11},{"ruleId":"245","severity":1,"message":"273","line":16,"column":8,"nodeType":"247","messageId":"248","endLine":16,"endColumn":16},{"ruleId":"245","severity":1,"message":"285","line":24,"column":3,"nodeType":"247","messageId":"248","endLine":24,"endColumn":18},{"ruleId":"245","severity":1,"message":"286","line":26,"column":10,"nodeType":"247","messageId":"248","endLine":26,"endColumn":23},{"ruleId":"274","severity":1,"message":"275","line":56,"column":9,"nodeType":"276","messageId":"277","endLine":56,"endColumn":11},{"ruleId":"241","severity":1,"message":"278","line":66,"column":6,"nodeType":"243","endLine":66,"endColumn":15,"suggestions":"287"},{"ruleId":"241","severity":1,"message":"288","line":71,"column":6,"nodeType":"243","endLine":71,"endColumn":8,"suggestions":"289"},{"ruleId":"245","severity":1,"message":"246","line":1,"column":29,"nodeType":"247","messageId":"248","endLine":1,"endColumn":38},{"ruleId":"245","severity":1,"message":"290","line":9,"column":10,"nodeType":"247","messageId":"248","endLine":9,"endColumn":17},{"ruleId":"238","severity":1,"message":"239","line":3,"column":1,"nodeType":"240","endLine":11,"endColumn":3},{"ruleId":"241","severity":1,"message":"291","line":39,"column":6,"nodeType":"243","endLine":39,"endColumn":13,"suggestions":"292"},{"ruleId":"245","severity":1,"message":"293","line":52,"column":5,"nodeType":"247","messageId":"248","endLine":52,"endColumn":7},{"ruleId":"245","severity":1,"message":"263","line":30,"column":18,"nodeType":"247","messageId":"248","endLine":30,"endColumn":23},{"ruleId":"241","severity":1,"message":"294","line":56,"column":6,"nodeType":"243","endLine":56,"endColumn":15,"suggestions":"295"},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getAuthUser'. Either include it or remove the dependency array.","ArrayExpression",["298"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Preloader' is defined but never used.","'history' is assigned a value but never used.","'createChannel' is defined but never used.","'listChannels' is defined but never used.","'result' is assigned a value but never used.","'useContext' is defined but never used.","no-use-before-define","'useContext' was used before it was defined.","usedBeforeDefined","React Hook useEffect has a missing dependency: 'getChannels'. Either include it or remove the dependency array.",["299"],"'CommentIcon' is defined but never used.","'Link' is defined but never used.","'style' is assigned a value but never used.","'Avatar' is defined but never used.","'AvatarGroup' is defined but never used.","'graphqlOperation' is defined but never used.","'API' is defined but never used.","'useState' is defined but never used.","'Box' is defined but never used.","'TextField' is defined but never used.","'ListItemIcon' is defined but never used.","'Fab' is defined but never used.","'SendIcon' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has a missing dependency: 'subscribeToMessages'. Either include it or remove the dependency array.",["300"],"React Hook useEffect has a missing dependency: 'clearProfile'. Either include it or remove the dependency array.",["301"],["302"],["303"],"'Badge' is defined but never used.","'onUpdateChannel' is defined but never used.","'updateChannel' is defined but never used.",["304"],"React Hook useEffect has a missing dependency: 'clearChannel'. Either include it or remove the dependency array.",["305"],"'getUser' is defined but never used.","React Hook useEffect has a missing dependency: 'setAlert'. Either include it or remove the dependency array.",["306"],"'id' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["307"],"no-global-assign","no-unsafe-negation",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"314","fix":"316"},{"desc":"314","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},"Update the dependencies array to be: [getAuthUser, user]",{"range":"326","text":"327"},"Update the dependencies array to be: [getChannels]",{"range":"328","text":"329"},"Update the dependencies array to be: [loadingFriendChannel, subscribeToMessages]",{"range":"330","text":"331"},"Update the dependencies array to be: [clearProfile]",{"range":"332","text":"333"},{"range":"334","text":"333"},{"range":"335","text":"333"},"Update the dependencies array to be: [channel, subscribeToMessages]",{"range":"336","text":"337"},"Update the dependencies array to be: [clearChannel]",{"range":"338","text":"339"},"Update the dependencies array to be: [error, setAlert]",{"range":"340","text":"341"},"Update the dependencies array to be: [loading, name]",{"range":"342","text":"343"},[813,819],"[getAuthUser, user]",[1182,1184],"[getChannels]",[2115,2137],"[loadingFriendChannel, subscribeToMessages]",[2247,2249],"[clearProfile]",[1796,1798],[2097,2099],[2141,2150],"[channel, subscribeToMessages]",[2231,2233],"[clearChannel]",[1293,1300],"[error, setAlert]",[1748,1757],"[loading, name]"]